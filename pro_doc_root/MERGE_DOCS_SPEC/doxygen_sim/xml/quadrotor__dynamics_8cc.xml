<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="quadrotor__dynamics_8cc" kind="file">
    <compoundname>quadrotor_dynamics.cc</compoundname>
    <includes local="no">cmath</includes>
    <includes refid="quadrotor__dynamics_8hh" local="yes">quadrotor_dynamics.hh</includes>
    <incdepgraph>
      <node id="106">
        <label>../dependencies/resources.hh</label>
        <link refid="resources_8hh_source"/>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>cmath</label>
      </node>
      <node id="111">
        <label>constants.hh</label>
        <link refid="constants_8hh_source"/>
      </node>
      <node id="103">
        <label>string</label>
      </node>
      <node id="109">
        <label>gazebo/msgs/msgs.hh</label>
      </node>
      <node id="105">
        <label>gazebo/math/Vector3.hh</label>
      </node>
      <node id="107">
        <label>gazebo/gazebo.hh</label>
      </node>
      <node id="104">
        <label>math.h</label>
      </node>
      <node id="100">
        <label>/home/usappz/DeadalusSim/source/quadrotor_dynamics/quadrotor_dynamics.cc</label>
        <link refid="quadrotor_dynamics.cc"/>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>quadrotor_dynamics.hh</label>
        <link refid="quadrotor__dynamics_8hh_source"/>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>gazebo/physics/physics.hh</label>
      </node>
      <node id="110">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>____<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_____<sp/><sp/><sp/><sp/><sp/>_</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>/<sp/>___|<sp/><sp/>__<sp/>_<sp/>_<sp/>__<sp/><sp/>_<sp/>__|__<sp/><sp/>/<sp/><sp/>__|<sp/>|<sp/>___</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>\___<sp/>\<sp/>/<sp/>_`<sp/>|<sp/>&apos;_<sp/>\|<sp/>&apos;_<sp/>\<sp/>/<sp/>/<sp/><sp/>/<sp/>_`<sp/>|/<sp/>_<sp/>\</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/><sp/>___)<sp/>|<sp/>(_|<sp/>|<sp/>|_)<sp/>|<sp/>|_)<sp/>/<sp/>/_<sp/>|<sp/>(_|<sp/>|<sp/><sp/>__/</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>|____/<sp/>\__,_|<sp/>.__/|<sp/>.__/____(_)__,_|\___|</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|_|<sp/><sp/><sp/>|_|</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Andreas<sp/>Gschossmann</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>Email:<sp/><sp/>andreas.gschossmann@hs-regensburg.de</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>quadrotor_dynamics.cc<sp/>-<sp/>Relationship<sp/>between<sp/>rotor-speed<sp/>or<sp/>alternatively<sp/></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>digital<sp/>value<sp/>for<sp/>brushless<sp/>drivers<sp/>and<sp/>resulting<sp/>thrust<sp/>of<sp/>the<sp/>motor.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>-----------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;quadrotor_dynamics.hh&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//using<sp/>namespace<sp/>std;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="classQuadRotorDynamics_1a372eda60cafabb0a7f1d2ee2e32258e6" kindref="member" tooltip="Constructor.">QuadRotorDynamics::QuadRotorDynamics</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>k_t,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>k_m,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>moment_arm,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_type,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dead_time)<sp/>:</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>_k_t(k_t),</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>_k_m(k_m),</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>_moment_arm(moment_arm),</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>_error_type(error_type),</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>_K(K),</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>_C(C),</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>_T(T),</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>_dead_time(dead_time),</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>_rotor_speed_max(0.0),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>_rotor_acceleration_max(0.0),</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>_limit_const_act(false),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>_limit_transient_act(false)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="classQuadRotorDynamics_1ad7b93bca3a67ed73bd274396ba0ad6e7" kindref="member" tooltip="Destructor.">QuadRotorDynamics::~QuadRotorDynamics</ref>()</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="classMechanics" kindref="compound" tooltip="Container Classes for Thrusts and Torques on quadrocopter frame.">Mechanics</ref><sp/><ref refid="classQuadRotorDynamics_1a8516ae14795d90e9f484e552b4f94bc8" kindref="member" tooltip="Updates the Thrusts and Torques.">QuadRotorDynamics::update</ref>(<ref refid="classActuationVal" kindref="compound" tooltip="Container class for actuation values of four motors.">ActuationVal</ref><sp/>actuation_value,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deltaT)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>actuation<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1ad096150d94c3500ccea432f39c9518fc" kindref="member" tooltip="Current actuation value.">_actuation_value</ref><sp/>=<sp/>actuation_value;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>previous<sp/>rotor<sp/>speed<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1af767bcd7e68d2867721cec08e52caaa3" kindref="member" tooltip="Previous rotor speed.">_rotor_speed_prev</ref><sp/>=<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>delta<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1acb408bb34e58205c8c9239de6755a1ec" kindref="member" tooltip="Simulation time, which has passed since the last simulation step.">_dT</ref><sp/>=<sp/>deltaT;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Quadrotor<sp/>dynamics<sp/>equations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pt1_element<sp/>calculates<sp/>the<sp/>current<sp/>rotor_speed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1a9755a314e2c4d7abc54135bb127b8d75" kindref="member" tooltip="PT1 element K*u + C = T*(d/dt)omega + omega.">QuadRotorDynamics::pt1_element</ref>();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1a8c92658749a4850ff5926d580e418e7c" kindref="member" tooltip="Check limits of maximal rotor speed and maximal rotor acceleration.">QuadRotorDynamics::check_limits</ref>();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1a6af363905190ef448b961a70a5b0042a" kindref="member" tooltip="Calculates the Thrust Forces and Drag Torque on the quadrotor frame created by the rotors angular vel...">QuadRotorDynamics::aerodynamics</ref>();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1af7e8d034a94d648d9d6136e0540db630" kindref="member" tooltip="Calculates the roll and pitch torques on the quadrocopter frame.">QuadRotorDynamics::roll_pitch_torque</ref>();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1a78d2bfe2469d1fd447b486ebf6a3fd64" kindref="member" tooltip="Provides disturbance to the Thrust.">QuadRotorDynamics::disturbance</ref>();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>updated<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1a8c92658749a4850ff5926d580e418e7c" kindref="member" tooltip="Check limits of maximal rotor speed and maximal rotor acceleration.">QuadRotorDynamics::check_limits</ref>()</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classQuadRotorDynamics_1a52129351aee2aa2ca2218c888f83fa8f" kindref="member">_limit_const_act</ref><sp/>&amp;&amp;<sp/>(<ref refid="classQuadRotorDynamics_1acae91d3031650906ca6a995ae0443813" kindref="member" tooltip="Maximal rotor speed limited by check_limits()">_rotor_speed_max</ref><sp/>!=<sp/>0.0)<sp/>)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>limits<sp/>of<sp/>rotor<sp/>speed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[FRONT]<sp/>&gt;<sp/><ref refid="classQuadRotorDynamics_1acae91d3031650906ca6a995ae0443813" kindref="member" tooltip="Maximal rotor speed limited by check_limits()">_rotor_speed_max</ref>)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;DeadalusSim<sp/>notification:<sp/>Rotor<sp/>speed<sp/>reached<sp/>its<sp/>Limit:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classQuadRotorDynamics_1acae91d3031650906ca6a995ae0443813" kindref="member" tooltip="Maximal rotor speed limited by check_limits()">_rotor_speed_max</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[FRONT]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1acae91d3031650906ca6a995ae0443813" kindref="member" tooltip="Maximal rotor speed limited by check_limits()">_rotor_speed_max</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[REAR]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1acae91d3031650906ca6a995ae0443813" kindref="member" tooltip="Maximal rotor speed limited by check_limits()">_rotor_speed_max</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[LEFT]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1acae91d3031650906ca6a995ae0443813" kindref="member" tooltip="Maximal rotor speed limited by check_limits()">_rotor_speed_max</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[RIGHT]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1acae91d3031650906ca6a995ae0443813" kindref="member" tooltip="Maximal rotor speed limited by check_limits()">_rotor_speed_max</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classQuadRotorDynamics_1a68be41ce31d096a587aabdc2c6f0bcfb" kindref="member">_limit_transient_act</ref><sp/>&amp;&amp;<sp/>(<ref refid="classQuadRotorDynamics_1acd0beff4d2419aa7aa37d87c3c5690bf" kindref="member" tooltip="Maximal rotor accaleration limited by check_limits()">_rotor_acceleration_max</ref><sp/>!=<sp/>0.0)<sp/>)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>limits<sp/>of<sp/>rotor<sp/>acceleration<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classQuadRotorDynamics_1a0ae2098f9ed0752b2fb5b3079dd02cf1" kindref="member" tooltip="Current rotor acceleration.">_rotor_acceleration</ref>.motor[FRONT]<sp/>&gt;<sp/><ref refid="classQuadRotorDynamics_1acd0beff4d2419aa7aa37d87c3c5690bf" kindref="member" tooltip="Maximal rotor accaleration limited by check_limits()">_rotor_acceleration_max</ref>)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;DeadalusSim<sp/>notification:<sp/>Rotor<sp/>speed<sp/>reached<sp/>its<sp/>Limit:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classQuadRotorDynamics_1acd0beff4d2419aa7aa37d87c3c5690bf" kindref="member" tooltip="Maximal rotor accaleration limited by check_limits()">_rotor_acceleration_max</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[FRONT]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1acd0beff4d2419aa7aa37d87c3c5690bf" kindref="member" tooltip="Maximal rotor accaleration limited by check_limits()">_rotor_acceleration_max</ref><sp/>*<sp/><ref refid="classQuadRotorDynamics_1acb408bb34e58205c8c9239de6755a1ec" kindref="member" tooltip="Simulation time, which has passed since the last simulation step.">_dT</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[REAR]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1acd0beff4d2419aa7aa37d87c3c5690bf" kindref="member" tooltip="Maximal rotor accaleration limited by check_limits()">_rotor_acceleration_max</ref><sp/>*<sp/><ref refid="classQuadRotorDynamics_1acb408bb34e58205c8c9239de6755a1ec" kindref="member" tooltip="Simulation time, which has passed since the last simulation step.">_dT</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[LEFT]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1acd0beff4d2419aa7aa37d87c3c5690bf" kindref="member" tooltip="Maximal rotor accaleration limited by check_limits()">_rotor_acceleration_max</ref><sp/>*<sp/><ref refid="classQuadRotorDynamics_1acb408bb34e58205c8c9239de6755a1ec" kindref="member" tooltip="Simulation time, which has passed since the last simulation step.">_dT</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[RIGHT]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1acd0beff4d2419aa7aa37d87c3c5690bf" kindref="member" tooltip="Maximal rotor accaleration limited by check_limits()">_rotor_acceleration_max</ref><sp/>*<sp/><ref refid="classQuadRotorDynamics_1acb408bb34e58205c8c9239de6755a1ec" kindref="member" tooltip="Simulation time, which has passed since the last simulation step.">_dT</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1a9755a314e2c4d7abc54135bb127b8d75" kindref="member" tooltip="PT1 element K*u + C = T*(d/dt)omega + omega.">QuadRotorDynamics::pt1_element</ref>()</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classQuadRotorDynamics_1a25e1b881d7501ccba3bc213896f62e05" kindref="member" tooltip="T coefficient for pt1_element()">_T</ref><sp/>!=<sp/>0.0)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>K*u<sp/>+C<sp/>=<sp/>T*d/dt*omega<sp/>+<sp/>omega</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[FRONT]<sp/>=<sp/>(<sp/><ref refid="classQuadRotorDynamics_1ad096150d94c3500ccea432f39c9518fc" kindref="member" tooltip="Current actuation value.">_actuation_value</ref>.motor[FRONT]<sp/>*<sp/><ref refid="classQuadRotorDynamics_1aa804817d487b3fa1b8bd8f8ff6201565" kindref="member" tooltip="K coefficient for pt1_element()">_K</ref><sp/>-<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[FRONT]<sp/>+<sp/><ref refid="classQuadRotorDynamics_1a229de7528658128afa2f0aed504efad5" kindref="member" tooltip="C coefficient for pt1_element()">_C</ref><sp/>)<sp/>*<sp/><ref refid="classQuadRotorDynamics_1a25e1b881d7501ccba3bc213896f62e05" kindref="member" tooltip="T coefficient for pt1_element()">_T</ref><sp/>/<sp/><ref refid="classQuadRotorDynamics_1acb408bb34e58205c8c9239de6755a1ec" kindref="member" tooltip="Simulation time, which has passed since the last simulation step.">_dT</ref><sp/>+<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[FRONT];</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[REAR]<sp/>=<sp/>(<sp/><ref refid="classQuadRotorDynamics_1ad096150d94c3500ccea432f39c9518fc" kindref="member" tooltip="Current actuation value.">_actuation_value</ref>.motor[REAR]<sp/>*<sp/><ref refid="classQuadRotorDynamics_1aa804817d487b3fa1b8bd8f8ff6201565" kindref="member" tooltip="K coefficient for pt1_element()">_K</ref><sp/>-<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[REAR]<sp/>+<sp/><ref refid="classQuadRotorDynamics_1a229de7528658128afa2f0aed504efad5" kindref="member" tooltip="C coefficient for pt1_element()">_C</ref><sp/>)<sp/>*<sp/><ref refid="classQuadRotorDynamics_1a25e1b881d7501ccba3bc213896f62e05" kindref="member" tooltip="T coefficient for pt1_element()">_T</ref><sp/>/<sp/><ref refid="classQuadRotorDynamics_1acb408bb34e58205c8c9239de6755a1ec" kindref="member" tooltip="Simulation time, which has passed since the last simulation step.">_dT</ref><sp/>+<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[REAR];</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[LEFT]<sp/>=<sp/>(<sp/><ref refid="classQuadRotorDynamics_1ad096150d94c3500ccea432f39c9518fc" kindref="member" tooltip="Current actuation value.">_actuation_value</ref>.motor[LEFT]<sp/>*<sp/><ref refid="classQuadRotorDynamics_1aa804817d487b3fa1b8bd8f8ff6201565" kindref="member" tooltip="K coefficient for pt1_element()">_K</ref><sp/>-<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[LEFT]<sp/>+<sp/><ref refid="classQuadRotorDynamics_1a229de7528658128afa2f0aed504efad5" kindref="member" tooltip="C coefficient for pt1_element()">_C</ref><sp/>)<sp/>*<sp/><ref refid="classQuadRotorDynamics_1a25e1b881d7501ccba3bc213896f62e05" kindref="member" tooltip="T coefficient for pt1_element()">_T</ref><sp/>/<sp/><ref refid="classQuadRotorDynamics_1acb408bb34e58205c8c9239de6755a1ec" kindref="member" tooltip="Simulation time, which has passed since the last simulation step.">_dT</ref><sp/>+<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[LEFT];</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[RIGHT]<sp/>=<sp/>(<sp/><ref refid="classQuadRotorDynamics_1ad096150d94c3500ccea432f39c9518fc" kindref="member" tooltip="Current actuation value.">_actuation_value</ref>.motor[RIGHT]<sp/>*<sp/><ref refid="classQuadRotorDynamics_1aa804817d487b3fa1b8bd8f8ff6201565" kindref="member" tooltip="K coefficient for pt1_element()">_K</ref><sp/>-<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[RIGHT]<sp/>+<sp/><ref refid="classQuadRotorDynamics_1a229de7528658128afa2f0aed504efad5" kindref="member" tooltip="C coefficient for pt1_element()">_C</ref><sp/>)<sp/>*<sp/><ref refid="classQuadRotorDynamics_1a25e1b881d7501ccba3bc213896f62e05" kindref="member" tooltip="T coefficient for pt1_element()">_T</ref><sp/>/<sp/><ref refid="classQuadRotorDynamics_1acb408bb34e58205c8c9239de6755a1ec" kindref="member" tooltip="Simulation time, which has passed since the last simulation step.">_dT</ref><sp/>+<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[RIGHT];</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[FRONT]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1aa804817d487b3fa1b8bd8f8ff6201565" kindref="member" tooltip="K coefficient for pt1_element()">_K</ref>*<ref refid="classQuadRotorDynamics_1ad096150d94c3500ccea432f39c9518fc" kindref="member" tooltip="Current actuation value.">_actuation_value</ref>.motor[FRONT]<sp/>+<sp/><ref refid="classQuadRotorDynamics_1a229de7528658128afa2f0aed504efad5" kindref="member" tooltip="C coefficient for pt1_element()">_C</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[REAR]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1aa804817d487b3fa1b8bd8f8ff6201565" kindref="member" tooltip="K coefficient for pt1_element()">_K</ref>*<ref refid="classQuadRotorDynamics_1ad096150d94c3500ccea432f39c9518fc" kindref="member" tooltip="Current actuation value.">_actuation_value</ref>.motor[REAR]<sp/>+<sp/><ref refid="classQuadRotorDynamics_1a229de7528658128afa2f0aed504efad5" kindref="member" tooltip="C coefficient for pt1_element()">_C</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[LEFT]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1aa804817d487b3fa1b8bd8f8ff6201565" kindref="member" tooltip="K coefficient for pt1_element()">_K</ref>*<ref refid="classQuadRotorDynamics_1ad096150d94c3500ccea432f39c9518fc" kindref="member" tooltip="Current actuation value.">_actuation_value</ref>.motor[LEFT]<sp/>+<sp/><ref refid="classQuadRotorDynamics_1a229de7528658128afa2f0aed504efad5" kindref="member" tooltip="C coefficient for pt1_element()">_C</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[RIGHT]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1aa804817d487b3fa1b8bd8f8ff6201565" kindref="member" tooltip="K coefficient for pt1_element()">_K</ref>*<ref refid="classQuadRotorDynamics_1ad096150d94c3500ccea432f39c9518fc" kindref="member" tooltip="Current actuation value.">_actuation_value</ref>.motor[RIGHT]<sp/>+<sp/><ref refid="classQuadRotorDynamics_1a229de7528658128afa2f0aed504efad5" kindref="member" tooltip="C coefficient for pt1_element()">_C</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i<sp/>++)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[i]<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>deat<sp/>time<sp/>not<sp/>supported<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1a6af363905190ef448b961a70a5b0042a" kindref="member" tooltip="Calculates the Thrust Forces and Drag Torque on the quadrotor frame created by the rotors angular vel...">QuadRotorDynamics::aerodynamics</ref>()</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>motor<sp/>thrusts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>.<ref refid="classMechanics_1a9ed197f325203c900db04d1bf2389832" kindref="member" tooltip="Thrust Forces on all four motors on the quadrocopter frame.">thrust</ref>.motor[FRONT]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1ad16ff51ab4ce8bec56f953da64fb71b9" kindref="member" tooltip="Thrust coefficient.">_k_t</ref><sp/>*<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[FRONT]<sp/>*<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[FRONT];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>.<ref refid="classMechanics_1a9ed197f325203c900db04d1bf2389832" kindref="member" tooltip="Thrust Forces on all four motors on the quadrocopter frame.">thrust</ref>.motor[REAR]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1ad16ff51ab4ce8bec56f953da64fb71b9" kindref="member" tooltip="Thrust coefficient.">_k_t</ref><sp/>*<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[REAR]<sp/>*<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[REAR];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>.<ref refid="classMechanics_1a9ed197f325203c900db04d1bf2389832" kindref="member" tooltip="Thrust Forces on all four motors on the quadrocopter frame.">thrust</ref>.motor[LEFT]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1ad16ff51ab4ce8bec56f953da64fb71b9" kindref="member" tooltip="Thrust coefficient.">_k_t</ref><sp/>*<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[LEFT]<sp/>*<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[LEFT];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>.<ref refid="classMechanics_1a9ed197f325203c900db04d1bf2389832" kindref="member" tooltip="Thrust Forces on all four motors on the quadrocopter frame.">thrust</ref>.motor[RIGHT]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1ad16ff51ab4ce8bec56f953da64fb71b9" kindref="member" tooltip="Thrust coefficient.">_k_t</ref><sp/>*<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[RIGHT]<sp/>*<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[RIGHT];</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>yaw<sp/>moment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>.<ref refid="classMechanics_1a4467d7d60ace2a433c2001b21bf4c2d3" kindref="member" tooltip="Torque on the quadrocopter frame.">torque</ref>.yaw<sp/>=<sp/><ref refid="classQuadRotorDynamics_1acf8efb67931462dba06fe187661010a7" kindref="member" tooltip="Moment coefficient.">_k_m</ref><sp/>*<sp/>(<ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[REAR]<sp/>-<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[LEFT]<sp/>+<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[FRONT]<sp/>-<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[RIGHT]);</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1af7e8d034a94d648d9d6136e0540db630" kindref="member" tooltip="Calculates the roll and pitch torques on the quadrocopter frame.">QuadRotorDynamics::roll_pitch_torque</ref>()</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculate<sp/>roll<sp/>and<sp/>pitch<sp/>torques</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>.<ref refid="classMechanics_1a4467d7d60ace2a433c2001b21bf4c2d3" kindref="member" tooltip="Torque on the quadrocopter frame.">torque</ref>.roll<sp/>=<sp/><ref refid="classQuadRotorDynamics_1af531365138f761c7210d78da8c92e95a" kindref="member" tooltip="Distance between rotor axis and center of quadrotor frame.">_moment_arm</ref><sp/>*<sp/><ref refid="classQuadRotorDynamics_1ad16ff51ab4ce8bec56f953da64fb71b9" kindref="member" tooltip="Thrust coefficient.">_k_t</ref><sp/>*<sp/>(<ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[LEFT]<sp/>-<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[RIGHT]);<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Vorzeichen<sp/>ueberpruefen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>.<ref refid="classMechanics_1a4467d7d60ace2a433c2001b21bf4c2d3" kindref="member" tooltip="Torque on the quadrocopter frame.">torque</ref>.pitch<sp/>=<sp/><ref refid="classQuadRotorDynamics_1af531365138f761c7210d78da8c92e95a" kindref="member" tooltip="Distance between rotor axis and center of quadrotor frame.">_moment_arm</ref><sp/>*<sp/><ref refid="classQuadRotorDynamics_1ad16ff51ab4ce8bec56f953da64fb71b9" kindref="member" tooltip="Thrust coefficient.">_k_t</ref><sp/>*<sp/>(<ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[REAR]<sp/>-<sp/><ref refid="classQuadRotorDynamics_1a11ebd2bb3cb9a0245230246a37268ed8" kindref="member" tooltip="Current rotor speed.">_rotor_speed</ref>.motor[FRONT]);<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Vorzeichen<sp/>ueberpruefen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classQuadRotorDynamics_1a2f2eb8e9690abdc5679f0172e71b56fe" kindref="member">_gyroscopic_torque_active</ref><sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_mechanics.torque.roll<sp/>=<sp/>_mechanics.torque.roll<sp/>+<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_mechanics.torque.pitch<sp/>=<sp/>_mechanics.torque.pitch<sp/>+<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1a78d2bfe2469d1fd447b486ebf6a3fd64" kindref="member" tooltip="Provides disturbance to the Thrust.">QuadRotorDynamics::disturbance</ref>()</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1a076bfa86519993cb1fa9c1a6f49c05e2" kindref="member" tooltip="Index needed by disturbance for the error type SINE_ERROR.">_sine_index</ref><sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="classQuadRotorDynamics_1a44b7a5861b2f411029e2506f4cf1d532" kindref="member" tooltip="Error for the error provided by disturbance and set by setErrorType(int error_type)">_error_type</ref>)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NO_ERROR:</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;no_error&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GAUSSIAN_NOISE:</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Gaussian<sp/>noise<sp/>not<sp/>supported<sp/>yet&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SINE_ERROR:</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Sine<sp/>error&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>.<ref refid="classMechanics_1a9ed197f325203c900db04d1bf2389832" kindref="member" tooltip="Thrust Forces on all four motors on the quadrocopter frame.">thrust</ref>.motor[FRONT]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>.<ref refid="classMechanics_1a9ed197f325203c900db04d1bf2389832" kindref="member" tooltip="Thrust Forces on all four motors on the quadrocopter frame.">thrust</ref>.motor[FRONT];</highlight><highlight class="comment">//<sp/>+<sp/>2.0<sp/>+<sp/>2.0*cos(_sine_index);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>.<ref refid="classMechanics_1a9ed197f325203c900db04d1bf2389832" kindref="member" tooltip="Thrust Forces on all four motors on the quadrocopter frame.">thrust</ref>.motor[REAR]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>.<ref refid="classMechanics_1a9ed197f325203c900db04d1bf2389832" kindref="member" tooltip="Thrust Forces on all four motors on the quadrocopter frame.">thrust</ref>.motor[REAR];</highlight><highlight class="comment">//<sp/>+<sp/>2.0<sp/>+<sp/>2.0*sin(_sine_index);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>.<ref refid="classMechanics_1a9ed197f325203c900db04d1bf2389832" kindref="member" tooltip="Thrust Forces on all four motors on the quadrocopter frame.">thrust</ref>.motor[LEFT]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>.<ref refid="classMechanics_1a9ed197f325203c900db04d1bf2389832" kindref="member" tooltip="Thrust Forces on all four motors on the quadrocopter frame.">thrust</ref>.motor[LEFT]<sp/>+<sp/>1.0*sin(<ref refid="classQuadRotorDynamics_1a076bfa86519993cb1fa9c1a6f49c05e2" kindref="member" tooltip="Index needed by disturbance for the error type SINE_ERROR.">_sine_index</ref>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>.<ref refid="classMechanics_1a9ed197f325203c900db04d1bf2389832" kindref="member" tooltip="Thrust Forces on all four motors on the quadrocopter frame.">thrust</ref>.motor[RIGHT]<sp/>=<sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>.<ref refid="classMechanics_1a9ed197f325203c900db04d1bf2389832" kindref="member" tooltip="Thrust Forces on all four motors on the quadrocopter frame.">thrust</ref>.motor[RIGHT]<sp/>+<sp/>1.0*cos(<ref refid="classQuadRotorDynamics_1a076bfa86519993cb1fa9c1a6f49c05e2" kindref="member" tooltip="Index needed by disturbance for the error type SINE_ERROR.">_sine_index</ref>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error<sp/>type<sp/>not<sp/>supported.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1aa5e7a8721f17b3e893ffaf4ba2e11fe0" kindref="member" tooltip="Makes check_limits() limit the maximal rotor speed.">QuadRotorDynamics::activate_limit_constant</ref>(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active<sp/>)</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1a52129351aee2aa2ca2218c888f83fa8f" kindref="member">_limit_const_act</ref><sp/>=<sp/>active;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(active)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Constant<sp/>limit<sp/>is<sp/>active<sp/>now.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classQuadRotorDynamics_1acae91d3031650906ca6a995ae0443813" kindref="member" tooltip="Maximal rotor speed limited by check_limits()">_rotor_speed_max</ref><sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Maximal<sp/>rotor<sp/>speed<sp/>is<sp/>zero.<sp/>Use<sp/>set_limit_constant<sp/>to<sp/>set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Maximal<sp/>value<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classQuadRotorDynamics_1acae91d3031650906ca6a995ae0443813" kindref="member" tooltip="Maximal rotor speed limited by check_limits()">_rotor_speed_max</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Rotor<sp/>speed<sp/>max<sp/>is<sp/>deactivated.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1ac4f8ac41406b65281bdc5956af41add5" kindref="member" tooltip="Makes check_limits() limit the maximal rotor acceleration.">QuadRotorDynamics::activate_limit_transient</ref>(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active<sp/>)</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1a68be41ce31d096a587aabdc2c6f0bcfb" kindref="member">_limit_transient_act</ref><sp/>=<sp/>active;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(active)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Transient<sp/>limit<sp/>is<sp/>active<sp/>now.<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classQuadRotorDynamics_1acd0beff4d2419aa7aa37d87c3c5690bf" kindref="member" tooltip="Maximal rotor accaleration limited by check_limits()">_rotor_acceleration_max</ref><sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Maximal<sp/>rotor<sp/>acceleration<sp/>is<sp/>zero.<sp/>Use<sp/>set_limit_constant()<sp/>to<sp/>set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Maximal<sp/>value<sp/>is<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classQuadRotorDynamics_1acd0beff4d2419aa7aa37d87c3c5690bf" kindref="member" tooltip="Maximal rotor accaleration limited by check_limits()">_rotor_acceleration_max</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Rotor<sp/>acceleration<sp/>max<sp/>is<sp/>deactivated.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1a8cbc221a76ea5bbbfa4e02749215d246" kindref="member" tooltip="Activates/Deactivates consideration of gyroscopic effect in roll_pitch_torque()">QuadRotorDynamics::activate_gyroscopic_torque</ref>(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>active<sp/>)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1a2f2eb8e9690abdc5679f0172e71b56fe" kindref="member">_gyroscopic_torque_active</ref><sp/>=<sp/>active;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classQuadRotorDynamics_1a2f2eb8e9690abdc5679f0172e71b56fe" kindref="member">_gyroscopic_torque_active</ref>)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Taking<sp/>gyroscopic<sp/>torque<sp/>of<sp/>the<sp/>rotors<sp/>into<sp/>account<sp/>is<sp/>activated&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Taking<sp/>gyroscopic<sp/>torque<sp/>of<sp/>the<sp/>rotors<sp/>into<sp/>account<sp/>is<sp/>deactivated&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1acac6ab2a247e7ab5278f561161655d63" kindref="member" tooltip="Set maximal rotor speed for check_limits()">QuadRotorDynamics::set_limit_const</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rotor_speed_max)</highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1acae91d3031650906ca6a995ae0443813" kindref="member" tooltip="Maximal rotor speed limited by check_limits()">_rotor_speed_max</ref><sp/>=<sp/>rotor_speed_max;</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1afe07675d12e14fb5f87a2ec308adcde6" kindref="member" tooltip="Set maximal rotor acceleration for check_limits()">QuadRotorDynamics::set_limit_transient</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rotor_acceleration_max)</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1acd0beff4d2419aa7aa37d87c3c5690bf" kindref="member" tooltip="Maximal rotor accaleration limited by check_limits()">_rotor_acceleration_max</ref><sp/>=<sp/>rotor_acceleration_max;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1aba615011e777f74007ad85f081a4461d" kindref="member" tooltip="Set K coefficient for pt1_element()">QuadRotorDynamics::set_k_pt1</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>K)</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1aa804817d487b3fa1b8bd8f8ff6201565" kindref="member" tooltip="K coefficient for pt1_element()">_K</ref><sp/>=<sp/>K;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1a143f29c5e77618243f63ebcca816616e" kindref="member" tooltip="Set T coefficient for pt1_element()">QuadRotorDynamics::set_t_pt1</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1a25e1b881d7501ccba3bc213896f62e05" kindref="member" tooltip="T coefficient for pt1_element()">_T</ref><sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1a65438d151cc47e28e071c6871e4723cd" kindref="member" tooltip="Set C coefficient for pt1_elmennt()">QuadRotorDynamics::set_c_pt1</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1a229de7528658128afa2f0aed504efad5" kindref="member" tooltip="C coefficient for pt1_element()">_C</ref><sp/>=<sp/>C;</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1ad743aee3d06c6987d0a70e4503f9c7c6" kindref="member" tooltip="Set dead time for pt1_element() (not supported yet)">QuadRotorDynamics::set_dead_time_pt1</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dead_time)</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1ab9c5ae3b9d8a1d582486488dd9682a75" kindref="member" tooltip="Dead Time for pt1_elment() (not supported yet)">_dead_time</ref><sp/>=<sp/>dead_time;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><ref refid="classMechanics" kindref="compound" tooltip="Container Classes for Thrusts and Torques on quadrocopter frame.">Mechanics</ref><sp/><ref refid="classQuadRotorDynamics_1a57f4210aee5f8ddde170d4b9f62fde2b" kindref="member" tooltip="Returns the Mechanics on the quadrotor frame including Thrust Forces and Drag Torques.">QuadRotorDynamics::getMechanics</ref>()</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>;</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><ref refid="classThrust" kindref="compound" tooltip="Container class for Thrusts of four motors.">Thrust</ref><sp/><ref refid="classQuadRotorDynamics_1a63b315a9a66707236a8780a9229fd63c" kindref="member" tooltip="Returns Thrust Forces produced by the motors.">QuadRotorDynamics::getThrust</ref>()</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>.<ref refid="classMechanics_1a9ed197f325203c900db04d1bf2389832" kindref="member" tooltip="Thrust Forces on all four motors on the quadrocopter frame.">thrust</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><ref refid="classTorque" kindref="compound" tooltip="Container Class for torques on the quadrocopter frame.">Torque</ref><sp/><ref refid="classQuadRotorDynamics_1aaa0be18d7a8b9244ce57292c60d74698" kindref="member" tooltip="Returns Torque on the quadrotor frame.">QuadRotorDynamics::getTorque</ref>()</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1a4c835e60eaceadda5c92ee01c5f97fd2" kindref="member" tooltip="Current Mechanics, containing Thrust Forces and Drag Torques.">_mechanics</ref>.<ref refid="classMechanics_1a4467d7d60ace2a433c2001b21bf4c2d3" kindref="member" tooltip="Torque on the quadrocopter frame.">torque</ref>;</highlight></codeline>
<codeline lineno="285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classQuadRotorDynamics_1adec8d18d4ce8bad0197501773fa7e6ea" kindref="member" tooltip="Sets the error type needed by disturbance() (NO_ERROR, GAUSSIAN_NOISE and SINE_ERROR supported)...">QuadRotorDynamics::setErrorType</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_type)</highlight></codeline>
<codeline lineno="288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><ref refid="classQuadRotorDynamics_1a44b7a5861b2f411029e2506f4cf1d532" kindref="member" tooltip="Error for the error provided by disturbance and set by setErrorType(int error_type)">_error_type</ref><sp/>=<sp/>error_type;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/usappz/DeadalusSim/source/quadrotor_dynamics/quadrotor_dynamics.cc"/>
  </compounddef>
</doxygen>
